//ainda não está acabado

PRAGMA foreign_keys= ON;
.headers on
.mode columns

-- DROPs
--confirmar se a hierarquia está certa!
DROP TABLE IF EXISTS Storage;
DROP TABLE IF EXISTS Fees;
DROP TABLE IF EXISTS FeesInfo;
DROP TABLE IF EXISTS Payment;
DROP TABLE IF EXISTS EventHistory;
DROP TABLE IF EXISTS AssociationHistory;
DROP TABLE IF EXISTS NonMember;
DROP TABLE IF EXISTS Member;
DROP TABLE IF EXISTS Person;

--CREATE TABLEs
CREATE TABLE Person( 
    name TEXT NOT NULL,
    email TEXT NOT NULL
   
);

CREATE TABLE Member (
    gender TEXT NOT NULL,
    city TEXT NOT NULL,
    joined_date TEXT NOT NULL,
    login_id INTEGER NOT NULL UNIQUE,
    login_password TEXT NOT NULL UNIQUE

);

CREATE TABLE NonMember (
    interest_in_joining BOOLEAN NOT NULL  --boolean or text?

);

CREATE TABLE Admin (
    id_admin NOT NULL UNIQUE
   
);

CREATE TABLE FeesInfo(
    id_feeinfo INTEGER PRIMARY KEY,
    fee_type TEXT NOT NULL CHECK (fee_type="regular" OR fee_type="social bodies"),
    fee_status TEXT NOT NULL CHECK (fee_status="paid" OR fee_status="behind" OR fee_status="danger of expulsion")
    
);

CREATE TABLE EventHistory(
    event_id INTEGER PRIMARY KEY,
    event_name TEXT NOT NULL,
    event_date TEXT NOT NULL,
    event_type TEXT NOT NULL
);

CREATE TABLE MemberEvent(
    login_id INTEGER REFERENCES Member, 
    event_id INTEGER REFERENCES EventHistory, 
    event_role TEXT NOT NULL
    
);

CREATE TABLE Payment(
   id_pay INTEGER PRIMARY KEY, 
   type_payment TEXT NOT NULL 
   CHECK(type_payment="mbway" OR type_payment="bank transfer"), 
   date_payment TEXT NOT NULL, 
   amount_paid DOUBLE NOT NULL -- CHECK(amount_paid%fee_amount = 0 )
	
);

CREATE TABLE Fees(
    id_fee INTEGER PRIMARY KEY,
    fee_amount INTEGER NOT NULL DEFAULT 2.5
    fee_month TEXT NOT NULL

   -- n_months_member AS date('now', 'start of month') - date(joined_date, 'start of month') INTEGER NOT NULL 

);

CREATE TABLE MemberFees(
    id_fee INTEGER REFERENCES Fees,
    login_id INTEGER REFERENCES Member
   
);

CREATE TABLE MemberPayment(
    id_pay INTEGER REFERENCES Payment,
    login_id INTEGER REFERENCES Member
   
);


CREATE TABLE AssociationHistory(
    id_asso INTEGER PRIMARY KEY,
    role TEXT NOT NULL,
    year TEXT NOT NULL --ou text?
   
);

CREATE TABLE MemberHistory(
    id_pay INTEGER REFERENCES Payment,
    id_asso INTEGER REFERENCES AssociationHistory
   
);

CREATE TABLE Storage(
    sid INTEGER PRIMARY KEY,
    product_type TEXT NOT NULL

);

CREATE TABLE MemberStorage(
    login_id INTEGER REFERENCES Member,
    sid INTEGER REFERENCES Storage,
    quantity INTEGER NOT NULL

);



--INSERTs
INSERT INTO Person (id) VALUES  (1);

INSERT INTO Member (name, gender, city, email) VALUES  ('Francisco','male','Setúbal', 'setubal@gmail.com');
INSERT INTO Member (name, gender, city, email) VALUES  ('Isabel','female','Senhora da Hora', 'isi@gmail.com');
INSERT INTO Member (name, gender, city, email) VALUES  ('Ana','female','Matosinhos', 'ana@gmail.com');
INSERT INTO Member (name, gender, city, email) VALUES  ('Paulo','male','Santo Tirso', 'matos@gmail.com');
INSERT INTO Member (name, gender, city, email) VALUES  ('Maria','female','Lisboa', 'moura@gmail.com');

INSERT INTO FeesInfo (fee_type, fee_status) VALUES  ('social bodies','paid');
INSERT INTO FeesInfo (fee_type, fee_status) VALUES  ('social bodies','paid');
INSERT INTO FeesInfo (fee_type, fee_status) VALUES  ('social bodies','paid');
INSERT INTO FeesInfo (fee_type, fee_status) VALUES  ('regular','paid');

INSERT INTO Payment (type_payment, date_payment, amount_payed) VALUES  ('mbway','2023-05-06','5');
INSERT INTO Payment (type_payment, date_payment, amount_payed) VALUES  ('mbway','2023-05-06','5');
INSERT INTO Payment (type_payment, date_payment, amount_payed) VALUES  ('bank transfer', '2023-06-06', '30');
INSERT INTO Payment (type_payment, date_payment, amount_payed) VALUES  ('bank transfer', '2023-10-06', '45');

INSERT INTO Fees (id_fee, joined_date, n_months_member, n_months_payed, end_date_payed) VALUES  (1, "2023-10-06", "45");
